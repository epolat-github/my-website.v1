{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n// import { navbarModifier } from \"../components/navbar\";\nimport { changeUserState } from \"../pages/blog\";\n\nvar firebase = require(\"firebase/app\");\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-auth\");\n\nvar zip = require(\"jszip\"); // TODO: move config to .env\n\n\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  // projectId: (`${process.env.REACT_APP_FIREBASE_PROJECT_ID}`),\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n}; // Initialize Firebase\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} // firebase.analytics();\n//instances\n\n\nvar firestore = firebase.firestore();\nvar auth = firebase.auth(); //methods\n\nexport var authInstance = function authInstance() {\n  return auth;\n};\nexport var dbInstance = function dbInstance() {\n  return firestore;\n}; // auth.onAuthStateChanged(user => {\n//   if (user) {\n//     console.log(user.email);\n//   } else {\n//     // console.log(\"user is signed out\");\n//     console.log(\"signed out\");\n//   }\n// });\n// check logged in info\n\nexport var checkUser = function checkUser() {\n  return auth.currentUser ? true : false;\n};\nexport var currentUser;\nauth.onAuthStateChanged(function (user) {\n  changeUserState(user);\n}); //TODO: registerdaki ve signindeki fonkları buraya taşı\n// add blog posts to database\n\nexport default function addDb(data) {\n  var docRef = firestore.collection(\"blogs\").doc(data.blogSlug);\n  docRef.set({\n    blogName: data.blogName,\n    blogDetail: data.blogDetail\n  }).then(function () {\n    return console.log(\"Saved\");\n  })[\"catch\"](function (error) {\n    return console.log(\"Got an error:\" + error);\n  });\n}\nexport var deletePost = function deletePost(postTitle) {\n  return _regeneratorRuntime.async(function deletePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new _Promise(function (resolve, reject) {\n            var query = firestore.collection(\"blogs\").where(\"blogName\", \"==\", postTitle);\n            query.get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                doc.ref[\"delete\"]().then(function () {\n                  resolve(true);\n                })[\"catch\"](function (error) {\n                  console.log(\"Delete error: \", error);\n                  resolve(false);\n                });\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var backup = function backup() {\n  console.log(\"backup called\");\n  zip.file(\"deneme.txt\", \"deneme\\n\");\n  zip.generateAsync({\n    type: \"blob\"\n  }).then(function (content) {\n    saveAs(content, \"deneme.zip\");\n  });\n};","map":{"version":3,"sources":["/home/epolat/Desktop/projects/website/src/dbCon.js"],"names":["changeUserState","firebase","require","zip","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","apps","length","initializeApp","firestore","auth","authInstance","dbInstance","checkUser","currentUser","onAuthStateChanged","user","addDb","data","docRef","collection","doc","blogSlug","set","blogName","blogDetail","then","console","log","error","deletePost","postTitle","resolve","reject","query","where","get","snapshot","forEach","ref","backup","file","generateAsync","type","content","saveAs"],"mappings":"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","sourcesContent":["// import { navbarModifier } from \"../components/navbar\";\nimport { changeUserState } from \"../pages/blog\";\n\nconst firebase = require(\"firebase/app\");\nrequire(\"firebase/firestore\");\nrequire(\"firebase/firebase-auth\");\n\nconst zip = require(\"jszip\");\n\n// TODO: move config to .env\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  // projectId: (`${process.env.REACT_APP_FIREBASE_PROJECT_ID}`),\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n// firebase.analytics();\n\n//instances\nconst firestore = firebase.firestore();\nconst auth = firebase.auth();\n\n//methods\nexport const authInstance = () => auth;\n\nexport const dbInstance = () => firestore;\n\n// auth.onAuthStateChanged(user => {\n//   if (user) {\n//     console.log(user.email);\n//   } else {\n//     // console.log(\"user is signed out\");\n//     console.log(\"signed out\");\n//   }\n// });\n\n// check logged in info\nexport const checkUser = () => {\n  return auth.currentUser ? true : false;\n};\n\nexport var currentUser;\n\nauth.onAuthStateChanged(user => {\n  changeUserState(user);\n});\n\n//TODO: registerdaki ve signindeki fonkları buraya taşı\n\n// add blog posts to database\nexport default function addDb(data) {\n  const docRef = firestore.collection(\"blogs\").doc(data.blogSlug);\n\n  docRef\n    .set({\n      blogName: data.blogName,\n      blogDetail: data.blogDetail\n    })\n    .then(() => console.log(\"Saved\"))\n    .catch(error => console.log(\"Got an error:\" + error));\n}\n\nexport const deletePost = async postTitle => {\n  return new Promise((resolve, reject) => {\n    const query = firestore\n      .collection(\"blogs\")\n      .where(\"blogName\", \"==\", postTitle);\n\n    query.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        doc.ref\n          .delete()\n          .then(() => {\n            resolve(true);\n          })\n          .catch(error => {\n            console.log(\"Delete error: \", error);\n            resolve(false);\n          });\n      });\n    });\n  });\n};\n\nexport const backup = () => {\n  console.log(\"backup called\");\n  zip.file(\"deneme.txt\", \"deneme\\n\");\n\n  zip.generateAsync({ type: \"blob\" }).then(content => {\n    saveAs(content, \"deneme.zip\");\n  });\n};\n"]},"metadata":{},"sourceType":"module"}