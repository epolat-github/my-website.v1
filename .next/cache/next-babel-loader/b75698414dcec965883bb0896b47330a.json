{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n// import { navbarModifier } from \"../components/navbar\";\nimport { changeUserState } from \"../pages/blog\";\n\nconst firebase = require(\"firebase/app\");\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-auth\");\n\nconst zip = require(\"jszip\")(); // import saveAs from \"save-as\"; \n// TODO: move config to .env\n\n\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  // projectId: (`${process.env.REACT_APP_FIREBASE_PROJECT_ID}`),\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n}; // Initialize Firebase\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} // firebase.analytics();\n//instances\n\n\nconst firestore = firebase.firestore();\nconst auth = firebase.auth(); //methods\n\nexport const authInstance = () => auth;\nexport const dbInstance = () => firestore; // auth.onAuthStateChanged(user => {\n//   if (user) {\n//     console.log(user.email);\n//   } else {\n//     // console.log(\"user is signed out\");\n//     console.log(\"signed out\");\n//   }\n// });\n// check logged in info\n\nexport const checkUser = () => {\n  return auth.currentUser ? true : false;\n};\nexport var currentUser;\nauth.onAuthStateChanged(user => {\n  changeUserState(user);\n}); //TODO: registerdaki ve signindeki fonkları buraya taşı\n// add blog posts to database\n\nexport default function addDb(data) {\n  const docRef = firestore.collection(\"blogs\").doc(data.blogSlug);\n  docRef.set({\n    blogName: data.blogName,\n    blogDetail: data.blogDetail\n  }).then(() => console.log(\"Saved\")).catch(error => console.log(\"Got an error:\" + error));\n}\nexport const deletePost = async postTitle => {\n  return new _Promise((resolve, reject) => {\n    const query = firestore.collection(\"blogs\").where(\"blogName\", \"==\", postTitle);\n    query.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        doc.ref.delete().then(() => {\n          resolve(true);\n        }).catch(error => {\n          console.log(\"Delete error: \", error);\n          resolve(false);\n        });\n      });\n    });\n  });\n};\nexport const backup = async () => {\n  console.log(\"backup called\");\n  zip.file(\"deneme.txt\", \"deneme\\n\");\n  zip.generateAsync({\n    type: \"blob\"\n  }).then(content => {\n    console.log(content);\n    return content; // saveAs(content, \"deneme.zip\");\n  });\n};","map":null,"metadata":{},"sourceType":"module"}