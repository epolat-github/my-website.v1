{"ast":null,"code":"var _jsxFileName = \"/home/epolat/Desktop/nextJs/website/pages/mock.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport addData from \"../src/dbCon\";\nimport { dbInstance } from \"../src/dbCon\";\nimport Layout from \"../components/layout\";\n\nconst transferData = data => {\n  let slug = data.blogSlug;\n  let name = data.blogName;\n  let detail = data.blogDetail;\n  document.querySelector(p).innerHTML(`name: ${name}, detail: ${detail}`);\n  addData({\n    blogSlug: slug,\n    blogName: name,\n    blogDetail: detail\n  });\n};\n\nasync function getData() {\n  let firestore = dbInstance();\n  firestore.collection(\"blogs\").get().then(snapshot.forEach(doc => {\n    console.log(doc);\n    return __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, doc.id, \" => \", doc.data());\n  })).catch(err => {\n    console.log(\"Error occurred => \", err);\n  });\n}\n\nasync function fillData(data) {\n  await getData().then(snapshot => console.log(snapshot));\n  let content = document.createTextNode(getData());\n  document.querySelector(\"#data\").appendChild(content);\n}\n\nconst Mock = () => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, __jsx(\"h1\", {\n  style: {\n    color: \"white\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, \"Deneme\"), __jsx(\"input\", {\n  type: \"text\",\n  placeholder: \"Blog Slug\",\n  id: \"inputSlug\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44\n  },\n  __self: this\n}), __jsx(\"input\", {\n  type: \"text\",\n  placeholder: \"Blog Title\",\n  id: \"inputName\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), \" \", __jsx(\"input\", {\n  type: \"text\",\n  placeholder: \"Blog Detail\",\n  id: \"inputDetail\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), __jsx(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}), __jsx(\"button\", {\n  className: \"submit\",\n  onClick: () => addData({\n    blogSlug: document.getElementById(\"inputSlug\").value,\n    blogName: document.getElementById(\"inputName\").value,\n    blogDetail: document.getElementById(\"inputDetail\").value\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, \"Submit\"), __jsx(\"button\", {\n  onClick: () => fillData(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, \"Get\"), __jsx(\"div\", {\n  id: \"data\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}), __jsx(\"p\", {\n  style: {\n    color: \"red\"\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n}, \"Blank input!\"));\n\nexport default Mock;","map":{"version":3,"sources":["/home/epolat/Desktop/nextJs/website/pages/mock.js"],"names":["addData","dbInstance","Layout","transferData","data","slug","blogSlug","name","blogName","detail","blogDetail","document","querySelector","p","innerHTML","getData","firestore","collection","get","then","snapshot","forEach","doc","console","log","id","catch","err","fillData","content","createTextNode","appendChild","Mock","color","getElementById","value"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,YAAY,GAAGC,IAAI,IAAI;AAC3B,MAAIC,IAAI,GAAGD,IAAI,CAACE,QAAhB;AACA,MAAIC,IAAI,GAAGH,IAAI,CAACI,QAAhB;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACM,UAAlB;AACAC,EAAAA,QAAQ,CAACC,aAAT,CAAuBC,CAAvB,EAA0BC,SAA1B,CAAqC,SAAQP,IAAK,aAAYE,MAAO,EAArE;AACAT,EAAAA,OAAO,CAAC;AAAEM,IAAAA,QAAQ,EAAED,IAAZ;AAAkBG,IAAAA,QAAQ,EAAED,IAA5B;AAAkCG,IAAAA,UAAU,EAAED;AAA9C,GAAD,CAAP;AACD,CAND;;AAQA,eAAeM,OAAf,GAAyB;AACvB,MAAIC,SAAS,GAAGf,UAAU,EAA1B;AACAe,EAAAA,SAAS,CACNC,UADH,CACc,OADd,EAEGC,GAFH,GAGGC,IAHH,CAIIC,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAI;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,GAAG,CAACG,EADP,UACeH,GAAG,CAAClB,IAAJ,EADf,CADF;AAKD,GAPD,CAJJ,EAaGsB,KAbH,CAaSC,GAAG,IAAI;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCG,GAAlC;AACD,GAfH;AAgBD;;AAED,eAAeC,QAAf,CAAwBxB,IAAxB,EAA8B;AAC5B,QAAMW,OAAO,GAAGI,IAAV,CAAeC,QAAQ,IAAIG,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAA3B,CAAN;AACA,MAAIS,OAAO,GAAGlB,QAAQ,CAACmB,cAAT,CAAwBf,OAAO,EAA/B,CAAd;AACAJ,EAAAA,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCmB,WAAhC,CAA4CF,OAA5C;AACD;;AAED,MAAMG,IAAI,GAAG,MACX,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAI,EAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,WAAW,EAAC,WAA/B;AAA2C,EAAA,EAAE,EAAC,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,EAKE;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,WAAW,EAAC,YAA/B;AAA4C,EAAA,EAAE,EAAC,WAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPF,OAOS;AAAO,EAAA,IAAI,EAAC,MAAZ;AAAmB,EAAA,WAAW,EAAC,aAA/B;AAA6C,EAAA,EAAE,EAAC,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPT,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EATF,EAUE;AACE,EAAA,SAAS,EAAC,QADZ;AAEE,EAAA,OAAO,EAAE,MACPjC,OAAO,CAAC;AACNM,IAAAA,QAAQ,EAAEK,QAAQ,CAACuB,cAAT,CAAwB,WAAxB,EAAqCC,KADzC;AAEN3B,IAAAA,QAAQ,EAAEG,QAAQ,CAACuB,cAAT,CAAwB,WAAxB,EAAqCC,KAFzC;AAGNzB,IAAAA,UAAU,EAAEC,QAAQ,CAACuB,cAAT,CAAwB,aAAxB,EAAuCC;AAH7C,GAAD,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,EAsBE;AAAQ,EAAA,OAAO,EAAE,MAAMP,QAAQ,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtBF,EAuBE;AAAK,EAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAvBF,EAwBE;AAAG,EAAA,KAAK,EAAE;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxBF,CADF;;AA6BA,eAAeD,IAAf","sourcesContent":["import addData from \"../src/dbCon\";\nimport { dbInstance } from \"../src/dbCon\";\nimport Layout from \"../components/layout\";\n\nconst transferData = data => {\n  let slug = data.blogSlug;\n  let name = data.blogName;\n  let detail = data.blogDetail;\n  document.querySelector(p).innerHTML(`name: ${name}, detail: ${detail}`);\n  addData({ blogSlug: slug, blogName: name, blogDetail: detail });\n};\n\nasync function getData() {\n  let firestore = dbInstance();\n  firestore\n    .collection(\"blogs\")\n    .get()\n    .then(\n      snapshot.forEach(doc => {\n        console.log(doc);\n        return (\n          <p>\n            {doc.id} => {doc.data()}\n          </p>\n        );\n      })\n    )\n    .catch(err => {\n      console.log(\"Error occurred => \", err);\n    });\n}\n\nasync function fillData(data) {\n  await getData().then(snapshot => console.log(snapshot));\n  let content = document.createTextNode(getData());\n  document.querySelector(\"#data\").appendChild(content);\n}\n\nconst Mock = () => (\n  <Layout>\n    <h1 style={{ color: \"white\" }}>Deneme</h1>\n    <input type=\"text\" placeholder=\"Blog Slug\" id=\"inputSlug\" />\n    <br />\n    <br />\n    <input type=\"text\" placeholder=\"Blog Title\" id=\"inputName\" />\n    <br />\n    <br /> <input type=\"text\" placeholder=\"Blog Detail\" id=\"inputDetail\" />\n    <br />\n    <br />\n    <button\n      className=\"submit\"\n      onClick={() =>\n        addData({\n          blogSlug: document.getElementById(\"inputSlug\").value,\n          blogName: document.getElementById(\"inputName\").value,\n          blogDetail: document.getElementById(\"inputDetail\").value\n        })\n      }\n    >\n      Submit\n    </button>\n    <button onClick={() => fillData()}>Get</button>\n    <div id=\"data\"></div>\n    <p style={{ color: \"red\" }}>Blank input!</p>\n  </Layout>\n);\n\nexport default Mock;\n"]},"metadata":{},"sourceType":"module"}