{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport { dbInstance } from \"../../src/dbCon\";\nimport Cors from \"micro-cors\";\n\nvar dateFormat = require(\"dateformat\");\n\nfunction handler(req, res) {\n  // const posts = postList(); //array of post obj\n  let firestore = dbInstance();\n  let posts = [];\n  firestore.collection(\"blogs\").orderBy(\"blogTime\", \"desc\").get().then(snapshot => {\n    snapshot.forEach(doc => {\n      let blogSlug = doc.id;\n      let blogInfo = doc.data();\n      let blogObj = {\n        title: blogInfo.blogName,\n        slug: blogSlug,\n        details: blogInfo.blogDetail,\n        date: dateFormat(blogInfo.blogTime, \"mmmm dS, yyyy\")\n      };\n      posts.push(blogObj);\n    }); // to get all posts (eg. post list of write page)\n\n    if (req.query.page === undefined) {\n      res.status(200).json({\n        posts: posts\n      });\n    } else {\n      // Pagination purpose\n      let page = _parseInt(req.query.page, 10);\n\n      let firstIndex = 9 * (page - 1);\n      let lastIndex = 9 * page;\n\n      if (lastIndex > posts.length) {\n        lastIndex = posts.length;\n      }\n\n      res.status(200).json({\n        posts: posts.slice(firstIndex, lastIndex),\n        postCount: posts.length\n      });\n    }\n  }).catch(error => console.log(\"error on getting posts\", error));\n}\n\nexport default Posts;","map":{"version":3,"sources":["/home/epolat/Desktop/projects/website/pages/api/posts.js"],"names":["dbInstance","Cors","dateFormat","require","handler","req","res","firestore","posts","collection","orderBy","get","then","snapshot","forEach","doc","blogSlug","id","blogInfo","data","blogObj","title","blogName","slug","details","blogDetail","date","blogTime","push","query","page","undefined","status","json","firstIndex","lastIndex","length","slice","postCount","catch","error","console","log","Posts"],"mappings":";AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AAEA,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,GAAtB,EAA2B;AACzB;AACA,MAAIC,SAAS,GAAGP,UAAU,EAA1B;AACA,MAAIQ,KAAK,GAAG,EAAZ;AACAD,EAAAA,SAAS,CACNE,UADH,CACc,OADd,EAEGC,OAFH,CAEW,UAFX,EAEuB,MAFvB,EAGGC,GAHH,GAIGC,IAJH,CAIQC,QAAQ,IAAI;AAChBA,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAI;AACtB,UAAIC,QAAQ,GAAGD,GAAG,CAACE,EAAnB;AACA,UAAIC,QAAQ,GAAGH,GAAG,CAACI,IAAJ,EAAf;AAEA,UAAIC,OAAO,GAAG;AACZC,QAAAA,KAAK,EAAEH,QAAQ,CAACI,QADJ;AAEZC,QAAAA,IAAI,EAAEP,QAFM;AAGZQ,QAAAA,OAAO,EAAEN,QAAQ,CAACO,UAHN;AAIZC,QAAAA,IAAI,EAAExB,UAAU,CAACgB,QAAQ,CAACS,QAAV,EAAoB,eAApB;AAJJ,OAAd;AAMAnB,MAAAA,KAAK,CAACoB,IAAN,CAAWR,OAAX;AACD,KAXD,EADgB,CAchB;;AACA,QAAIf,GAAG,CAACwB,KAAJ,CAAUC,IAAV,KAAmBC,SAAvB,EAAkC;AAChCzB,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBzB,QAAAA,KAAK,EAAEA;AADY,OAArB;AAGD,KAJD,MAIO;AACL;AACA,UAAIsB,IAAI,GAAG,UAASzB,GAAG,CAACwB,KAAJ,CAAUC,IAAnB,EAAyB,EAAzB,CAAX;;AACA,UAAII,UAAU,GAAG,KAAKJ,IAAI,GAAG,CAAZ,CAAjB;AACA,UAAIK,SAAS,GAAG,IAAIL,IAApB;;AACA,UAAIK,SAAS,GAAG3B,KAAK,CAAC4B,MAAtB,EAA8B;AAC5BD,QAAAA,SAAS,GAAG3B,KAAK,CAAC4B,MAAlB;AACD;;AACD9B,MAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBzB,QAAAA,KAAK,EAAEA,KAAK,CAAC6B,KAAN,CAAYH,UAAZ,EAAwBC,SAAxB,CADY;AAEnBG,QAAAA,SAAS,EAAE9B,KAAK,CAAC4B;AAFE,OAArB;AAID;AACF,GApCH,EAqCGG,KArCH,CAqCSC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,KAAtC,CArClB;AAsCD;;AAED,eAAeG,KAAf","sourcesContent":["import { dbInstance } from \"../../src/dbCon\";\nimport Cors from \"micro-cors\";\nvar dateFormat = require(\"dateformat\");\n\nfunction handler(req, res) {\n  // const posts = postList(); //array of post obj\n  let firestore = dbInstance();\n  let posts = [];\n  firestore\n    .collection(\"blogs\")\n    .orderBy(\"blogTime\", \"desc\")\n    .get()\n    .then(snapshot => {\n      snapshot.forEach(doc => {\n        let blogSlug = doc.id;\n        let blogInfo = doc.data();\n\n        let blogObj = {\n          title: blogInfo.blogName,\n          slug: blogSlug,\n          details: blogInfo.blogDetail,\n          date: dateFormat(blogInfo.blogTime, \"mmmm dS, yyyy\")\n        };\n        posts.push(blogObj);\n      });\n\n      // to get all posts (eg. post list of write page)\n      if (req.query.page === undefined) {\n        res.status(200).json({\n          posts: posts\n        });\n      } else {\n        // Pagination purpose\n        let page = parseInt(req.query.page, 10);\n        let firstIndex = 9 * (page - 1);\n        let lastIndex = 9 * page;\n        if (lastIndex > posts.length) {\n          lastIndex = posts.length;\n        }\n        res.status(200).json({\n          posts: posts.slice(firstIndex, lastIndex),\n          postCount: posts.length\n        });\n      }\n    })\n    .catch(error => console.log(\"error on getting posts\", error));\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}