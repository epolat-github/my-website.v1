{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\n// import { navbarModifier } from \"../components/navbar\";\nimport { changeUserState } from \"../pages/blog\";\n\nvar firebase = require(\"firebase/app\");\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-auth\");\n\nvar zip = require(\"jszip\")(); // import saveAs from \"save-as\"; \n// TODO: move config to .env\n\n\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  // projectId: (`${process.env.REACT_APP_FIREBASE_PROJECT_ID}`),\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n}; // Initialize Firebase\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} // firebase.analytics();\n//instances\n\n\nvar firestore = firebase.firestore();\nvar auth = firebase.auth(); //methods\n\nexport var authInstance = function authInstance() {\n  return auth;\n};\nexport var dbInstance = function dbInstance() {\n  return firestore;\n}; // auth.onAuthStateChanged(user => {\n//   if (user) {\n//     console.log(user.email);\n//   } else {\n//     // console.log(\"user is signed out\");\n//     console.log(\"signed out\");\n//   }\n// });\n// check logged in info\n\nexport var checkUser = function checkUser() {\n  return auth.currentUser ? true : false;\n};\nexport var currentUser;\nauth.onAuthStateChanged(function (user) {\n  changeUserState(user);\n}); //TODO: registerdaki ve signindeki fonkları buraya taşı\n// add blog posts to database\n\nexport default function addDb(data) {\n  var docRef = firestore.collection(\"blogs\").doc(data.blogSlug);\n  docRef.set({\n    blogName: data.blogName,\n    blogDetail: data.blogDetail\n  }).then(function () {\n    return console.log(\"Saved\");\n  })[\"catch\"](function (error) {\n    return console.log(\"Got an error:\" + error);\n  });\n}\nexport var deletePost = function deletePost(postTitle) {\n  return _regeneratorRuntime.async(function deletePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new _Promise(function (resolve, reject) {\n            var query = firestore.collection(\"blogs\").where(\"blogName\", \"==\", postTitle);\n            query.get().then(function (snapshot) {\n              snapshot.forEach(function (doc) {\n                doc.ref[\"delete\"]().then(function () {\n                  resolve(true);\n                })[\"catch\"](function (error) {\n                  console.log(\"Delete error: \", error);\n                  resolve(false);\n                });\n              });\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var backup = function backup() {\n  return _regeneratorRuntime.async(function backup$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(\"backup called\");\n          zip.file(\"deneme.txt\", \"deneme\\n\");\n          zip.generateAsync({\n            type: \"blob\"\n          }).then(function (content) {\n            console.log(content);\n            return content; // saveAs(content, \"deneme.zip\");\n          });\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}